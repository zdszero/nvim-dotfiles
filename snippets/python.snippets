# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet setter
	@${1:attribute}.setter
	def $1(self, val):
		self._$1 = val
snippet property
	@property
	def ${1:attribute}(self):
		return self._$1
snippet deleter
	@${1:attribute}.setter
	def $1(self, val):
		del self._$1
snippet #! Shebang header for python scripts
	#!/usr/bin/env python
	# encoding: utf-8
	$0
snippet ifmain
	if __name__ == '__main__':
		${1:main()}$0
snippet for
	for ${1:i} in range($2):
		$3
snippet contain
	def __len__(self):
		${1:pass}
	
	def __getitem__(self, key):
		${2:pass}
	
	def __setitem__(self, key, value):
		${3:pass}
	
	def __delitem__(self, key):
		${4:pass}
	
	def __iter__(self):
		${5:pass}
	
	def __reversed__(self):
		${6:pass}
	
	def __contains__(self, item):
		${7:pass}
snippet context
	def __enter__(self):
		${1:pass}
	
	def __exit__(self, exc_type, exc_value, traceback):
		${2:pass}
snippet attr
	def __getattr__(self, name):
		${1:pass}
	
	def __setattr__(self, name, value):
		${2:pass}
	
	def __delattr__(self, name):
		${3:pass}
snippet desc
	def __get__(self, instance, owner):
		${1:pass}
	
	def __set__(self, instance, value):
		${2:pass}
	
	def __delete__(self, instance):
		${3:pass}
snippet cmp
	def __eq__(self, other):
		${1:pass}
	
	def __ne__(self, other):
		${2:pass}
	
	def __lt__(self, other):
		${3:pass}
	
	def __le__(self, other):
		${4:pass}
	
	def __gt__(self, other):
		${5:pass}
	
	def __ge__(self, other):
		${6:pass}
	
	def __cmp__(self, other):
		${7:pass}
snippet repr
	def __repr__(self):
		${1:pass}
	
	def __str__(self):
		${2:pass}
	
	def __unicode__(self):
		${3:pass}
snippet numeric
	def __add__(self, other):
		${1:pass}
	
	def __sub__(self, other):
		${2:pass}
	
	def __mul__(self, other):
		${3:pass}
	
	def __div__(self, other):
		${4:pass}
	
	def __truediv__(self, other):
		${5:pass}
	
	def __floordiv__(self, other):
		${6:pass}
	
	
	def __mod__(self, other):
		${7:pass}
	
	def __divmod__(self, other):
		${8:pass}
	
	def __pow__(self, other):
		${9:pass}
	
	
	def __lshift__(self, other):
		${10:pass}
	
	def __rshift__(self, other):
		${11:pass}
	
	def __and__(self, other):
		${12:pass}
	
	def __xor__(self, other):
		${13:pass}
	
	def __or__(self, other):
		${14:pass}
	
	
	def __neg__(self):
		${15:pass}
	
	def __pos__(self):
		${16:pass}
	
	def __abs__(self):
		${17:pass}
	
	def __invert__(self):
		${18:pass}
	
	
	def __complex__(self):
		${19:pass}
	
	def __int__(self):
		${20:pass}
	
	def __long__(self):
		${21:pass}
	
	def __float__(self):
		${22:pass}
	
	
	def __oct__(self):
		${22:pass}
	
	def __hex__(self):
		${23:pass}
	
	
	def __index__(self):
		${24:pass}
	
	def __coerce__(self, other):
		${25:pass}
snippet from
	from ${1:module} import ${2:Stuff}
snippet roprop
	@property
	def ${1:name}(self):
		${2:return self._$1}$0
snippet if
	if ${1:condition}:
		${2:pass}
snippet ife
	if ${1:condition}:
		${2:pass}
	else:
		${3:pass}
snippet ifee
	if ${1:condition}:
		${2:pass}
	elif ${3:condition}:
		${4:pass}
	else:
		${5:pass}
snippet try
	try:
		${VISUAL}${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
snippet trye
	try:
		${VISUAL}${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet tryf
	try:
		${VISUAL}${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet tryef
	try:
		${VISUAL}${1:pass}
	except${2: ${3:Exception} as ${4:e}}:
		${5:raise}
	else:
		${6:pass}
	finally:
		${7:pass}
snippet pdb
	import pdb; pdb.set_trace()
snippet ipdb
	import ipdb; ipdb.set_trace()
snippet pudb
	import pudb; pudb.set_trace()
snippet ae
	self.assertEqual(${1:first},${2:second})
snippet at
	self.assertTrue(${0:exp})
snippet af
	self.assertFalse(${1:expression})
snippet aae
	self.assertAlmostEqual(${1:first},${2:second})
snippet ar
	self.assertRaises(${1:exception}, ${2:func}${3/.+/, /}${3:arguments})
snippet time_count
	t0 = time.perf_counter()
	# process
	elapsed = time.perf_counter() - t0
	print(f'elapsed time: {elapsed:.2f}s')
snippet printf
	print(f'$1')$0
snippet __enter__
	def __enter__(self):
		pass
	
	def __exit__(self, exc_type, exc_value, traceback):
		pass
snippet Generator
	Generator[yield_type, send_type, return_type]
