# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet main
	package main
	
	func main() {
		$0
	}
snippet for
	for ${1:i} := ${2:0}; $1 < $3; $1++ {
		${VISUAL}$0
	}
snippet if
	if $1 {
		${VISUAL}$0
	}
snippet ife
	if $1 {
		$2
	} else {
		$0
	}
snippet ifer
	if ${1:err} != nil {
		$0
	}
snippet eli
	else if ($1) {
		$0
	}
snippet fin
	for ${1:_}, $2 := range $3 {
		${VISUAL}$0
	}
snippet vars
	var (
		${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
	)
snippet pl
	fmt.Println($1)
snippet pf
	fmt.Printf($1)
snippet spf
	fmt.Sprintf($1)
snippet fpl
	fmt.Fprintln($1)
snippet fpf
	fmt.Fprintf($1)
snippet st
	type $1 struct {
		$0
	}
snippet app
	$1 = append($1, $0)
snippet pop
	$1 = $1[:len($1) - 1]
snippet popf
	$1 = $1[${2:1}:]$0
snippet remove
	$1 = append($1[:${2:idx}], $1[$2+1:]...)
snippet last
	$1[len($1) - 1]
snippet sw
	switch $1 {
	$0
	}
snippet ca
	case $1:
		$0
snippet de
	default:
		$0
snippet bf
	func Benchmark$1(b *testing.B) {
		for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {
			$0
		}
	}
snippet tf
	func Test$1(t *testing.T) {
		$0
	}
snippet tm
	func TestMain(m *testing.M) {
		$1
	
		os.Exit(m.Run())
	}
snippet tdt
	func Test$1(t *testing.T) {
		testCases := []struct {
			desc	string
			$2
		}{
			{
				desc: "$3",
				$4
			},
		}
		for _, tC := range testCases {
			t.Run(tC.desc, func(t *testing.T) {
				$0
			})
		}
	}
snippet fun
	func ${1:name}(${2:parameters}) $4{
		$3
	}
snippet fnew
	func New$1($2) *$1 {
		return &$1{$3}
	}
snippet lamb
	func (${1:receiver} ${2:type}) ${3:method}($4) $5 {,
		$0,
	}
snippet go
	go func($1) {
		$0
	}($2)
snippet helloweb
	package main
	
	import (
		"fmt"
		"net/http"
		"time"
	)
	
	func greet(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello World! %s", time.Now())
	}
	
	func main() {
		http.HandleFunc("/", greet)
		http.ListenAndServe(":8080", nil)
	}
snippet sort
	type ${1:SortBy} []${2:Type}
	
	func (a $1) Len() int           { return len(a) }
	func (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
	func (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }
snippet mkdir
	${1:dirname} := $2
	if _, err := os.Stat($1); os.IsNotExist(err) {
		err = os.Mkdir($1, os.ModePerm)
		if err != nil {
			log.Fatalf("create directory %v failed\\n", $1)$0
		}
	}
snippet http.Get http.Get
	resp, err := http.Get(${1:url})
	if err != nil {
		return nil, err
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
	}
	resp.Body.Close()
