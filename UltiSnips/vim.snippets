priority -50

snippet fun "Function" b
fun! ${1:function_name}(${2})$3
	$0
endfun
endsnippet

snippet if "if" b
if ${1:condition}
	${VISUAL}${2}
endif
endsnippet

snippet ife "if else" b
if ${1:condition}
	${VISUAL}${2}
else
	${3}
endif
endsnippet

snippet eli "elseif" b
elseif ${1:condition}
	${2}
endsnippet

snippet el "else" b
else
	${1}
endsnippet

snippet wh "while" b
while ${1}
	${2}
endwhile
endsnippet

snippet forr "for range" b
for ${1:i} in range($2)
	$3
endfor
endsnippet

snippet fin "normal for" b
for ${1:elem} in ${2:list}
	$3
endfor
endsnippet

snippet gvar "Global / configuration variable" b
if !exists("g:${1:Value}")
	let g:$1 = $2
endif
endsnippet

snippet jobcb "jobstart callback in one function" b
function! s:on_event(job_id, data, event) dict
	if a:event == 'stdout'
		$1
	elseif a:event == 'stderr'
		$2
	else
		" exit
		$3
	endif
	$0
endfunction
let s:callbacks = {
\ 'on_stdout': function('s:on_event'),
\ 'on_stderr': function('s:on_event'),
\ 'on_exit': function('s:on_event')
\ }
endsnippet

snippet jobcb_dict "jobcallback in several functions" b
let s:callbacks = {}
function s:callbacks.on_stdout(job_id, data, event)
	$0
endfunction

function s:callbacks.on_stderr(job_id, data, event)
endfunction

function s:callbacks.on_exit(job_id, data, event)
endfunction
endsnippet

snippet aug "augroup" b
aug ${1:GROUP_NAME}
	au!
	$0
aug END
endsnippet
