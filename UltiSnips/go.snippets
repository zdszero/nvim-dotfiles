# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet main "main func" b
package main

func main() {
	$0
}
endsnippet

snippet for "for" b
for ${1:i} := ${2:0}; ${1} < ${3}; ${1}++ {
	${VISUAL}$0
}
endsnippet

snippet if "if" b
if $1 {
	${VISUAL}$0
}
endsnippet

snippet ife "if else" b
if $1 {
	$2
} else {
	$0
}
endsnippet

snippet ifer "if err != nil" b
if ${1:err} != nil {
	$0
}
endsnippet

snippet eli "else if" b
else if ($1) {
	$0
}
endsnippet

snippet fin "for in" b
for ${1:_}, $2 := range $3 {
	${VISUAL}$0
}
endsnippet

snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet pl "fmt.Println()" b
fmt.Println($1)
endsnippet

snippet pf "fmt.Printf()" b
fmt.Printf($1)
endsnippet

snippet spf "fmt.Sprintf()" b
fmt.Sprintf($1)
endsnippet

snippet fpl "fmt.Fprintln()" b
fmt.Fprintln($1)
endsnippet

snippet fpf "fmt.Fprintf()" b
fmt.Fprintf($1)
endsnippet

snippet st "struct" b
type $1 struct {
	$0
}
endsnippet

snippet app "slice append" b
${1} = append(${1}, $0)
endsnippet

snippet pop "slice pop" b
$1 = $1[:len($1) - 1]
endsnippet

snippet popf "pop front" b
$1 = $1[${2:1}:]$0
endsnippet

snippet remove "remove intermidiate" b
$1 = append($1[:${2:idx}], $1[$2+1:]...)
endsnippet

snippet last "slice last element" w
$1[len($1) - 1]
endsnippet

snippet sw "switch" b
switch $1 {
$0
}
endsnippet

snippet ca "case" b
case $1:
	$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet bf "benchmark function"
func Benchmark$1(b *testing.B) {
	for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {
		$0
	}
}
endsnippet

snippet tf "test function" b
func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet tm "test main" b
func TestMain(m *testing.M) {
	$1

	os.Exit(m.Run())
}
endsnippet

snippet tdt "table driven test" b
func Test$1(t *testing.T) {
	testCases := []struct {
		desc	string
		$2
	}{
		{
			desc: "$3",
			$4
		},
	}
	for _, tC := range testCases {
		t.Run(tC.desc, func(t *testing.T) {
			$0
		})
	}
}
endsnippet

snippet fun "function" b
func ${1:name}(${2:parameters}) $4{
	$3
}
endsnippet

snippet fnew "NewObject" b
func New$1($2) *$1 {
	return &$1{$3}
}
endsnippet

snippet lamb "labmda fucntion" w
func (${1:receiver} ${2:type}) ${3:method}($4) $5 {,
	$0,
}
endsnippet

snippet go "goroutine function" w
go func($1) {
	$0
}($2)
endsnippet

snippet helloweb "hello world web app" b
package main

import (
	"fmt"
	"net/http"
	"time"
)

func greet(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World! %s", time.Now())
}

func main() {
	http.HandleFunc("/", greet)
	http.ListenAndServe(":8080", nil)
}
endsnippet

snippet sort "sorter interface" b
type ${1:SortBy} []${2:Type}

func (a $1) Len() int           { return len(a) }
func (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }
endsnippet

snippet mkdir "os.Mkdir" b
${1:dirname} := $2
if _, err := os.Stat($1); os.IsNotExist(err) {
	err = os.Mkdir($1, os.ModePerm)
	if err != nil {
		log.Fatalf("create directory %v failed\n", $1)$0
	}
}
endsnippet

snippet http.Get "http.Get" b
resp, err := http.Get(${1:url})
if err != nil {
	return nil, err
}
if resp.StatusCode != http.StatusOK {
	resp.Body.Close()
	return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
}
resp.Body.Close()
endsnippet
