priority -50

extends c

snippet cl "class with inline constructor" b
class ${1:MyClass} {
 public:
	$1() = default;
	~$1() = default;

	$1 &operator=(const $1 &) = default;
	$1(const $1 &) = default;

	$1($1 &&) = default;
	$1 &operator=($1 &&) = default;

 private:
	$2
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet usi "using name space" b
using namespace ${1:std};$0
endsnippet

snippet new "new type" b
${1:auto *}${2:var} = new ${3:type}($4)
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>${0}
endsnippet

snippet co "std::cout" b
std::cout << $0
endsnippet

snippet el "std::endl" w
std::endl;$0
endsnippet

snippet try "try catch clause" b
try {
	
} catch (const std::exception&) {
	$1
}
endsnippet

######################
#  STL COLLECTION    #
######################

snippet arr "std::array" b
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet vec "std::vector" b
std::vector<${1:T}> ${2};
endsnippet

snippet deq "std::deque" b
std::deque<${1:T}> ${2};
endsnippet

snippet flis "std::forward_list" b
std::forward_list<${1:T}> ${2};
endsnippet

snippet lis "std::list" b
std::list<${1:T}> ${2};
endsnippet

snippet set "std::set" b
std::set<${1:T}> ${2};
endsnippet

snippet map "std::map" b
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "std::multiset" b
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "std::multimap" b
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "std::unordered_set" b
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "std::unordered_map" b
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "std::unordered_multiset" b
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "std::unordered_multimap" b
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet sta "std::stack" b
std::stack<${1:T}> ${2};
endsnippet

snippet que "std::queue" b
std::queue<${1:T}> ${2};
endsnippet

snippet pque "std::priority_queue" b
std::priority_queue<${1:T}> ${2};
endsnippet

snippet mut "std::mutex" b
std::mutex ${1:m};
endsnippet

snippet lg "std::lock_guard" b
std::lock_guard<${1:std::mutex}> ${2:lk}(${3:m});
endsnippet

snippet ul "std::unique_lock" b
std::unique_lock<${1:std::mutex}> ${2:lk}(${3:m});
endsnippet

snippet cv "std::condition_variable" b
std::condition_variable ${1:cv};
endsnippet

snippet str "std::string" b
std::string $0
endsnippet

########################
#  STL smart pointers  #
########################

snippet msp "make shared_ptr" b
std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet

snippet amsp "make shared_ptr -> auto" b
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet

# std::unique_ptr
snippet mup "make unique_ptr" b
std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet

snippet amup "make unique_ptr -> auto" b
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet

snippet default_random_engine "Description" b
std::random_device rd;
std::default_random_engine rng(rd());
std::uniform_int_distribution<std::mt19937::result_type> dist(${1:range});
// dist(rng)
endsnippet

snippet mt19937 "mt19937 random number generator" b
std::random_device rd;
std::mt19937 rng(rd());
std::uniform_int_distribution<std::mt19937::result_type> dist(${1:range});
// dist(rng)
endsnippet

snippet delete_copy "delete copy constructor" b
${1:name}(const $1&) = delete;
$1& operator=(const $1&) = delete;
endsnippet

snippet delete_move "delete move constructor" b
${1:name}($1&&) = delete;
$1& operator=($1&&) = delete;
endsnippet

snippet copy_move_macro "COPY MOVE MACRO" b
// Macros to disable copying and moving
#define DISALLOW_COPY(cname)                             \
	cname(const cname &) = delete;            /* NOLINT */ \
	cname &operator=(const cname &) = delete; /* NOLINT */

#define DISALLOW_MOVE(cname)                        \
	cname(cname &&) = delete;            /* NOLINT */ \
	cname &operator=(cname &&) = delete; /* NOLINT */

#define DISALLOW_COPY_AND_MOVE(cname) \
	DISALLOW_COPY(cname);               \
	DISALLOW_MOVE(cname);
endsnippet

snippet lambda "lambda function" w
[$1]($2) {
	$0
};
endsnippet

######################
#   GOOGLE TEST      #
######################

snippet Test "Google Test" b
TEST(${1:SomethingTest}, ${2:SampleTest}) {
	$0
}
endsnippet

snippet sort "sort" b
std::sort(${1:v}.begin(), $1.end());
endsnippet

snippet sortf "sort with comparator" b
std::sort(${1:v}.begin(), $1.end(), []($3 l, $3 r) {
	$4
});
endsnippet

snippet fit "for iterator" b
for (auto ${1:it} = ${2:container}.begin(); $1 != $2.end(); $1++) {
	$3
}
endsnippet

snippet fin "for in " b
for ($1 : $2) {
	$3
}
endsnippet

snippet be "begin end iterator" w
${1:container}.begin(), ${1}.end()
endsnippet

#################
#  GOOGLE TEST  #
#################
snippet test "google test body" b
TEST(${1:test_suite_name}, ${2:test_name}) {
	$0
}
endsnippet

snippet eeq "EXPECT_EQ" b
EXPECT_EQ($1, $2);
endsnippet

snippet ene "EXPECT_NE" b
EXPECT_NE($1, $2);
endsnippet

snippet ege "EXPECT_GE" b
EXPECT_GE($1, $2);
endsnippet

snippet egt "EXPECT_GT" b
EXPECT_GT($1, $2);
endsnippet

snippet elt "EXPECT_LT" b
EXPECT_LT($1, $2);
endsnippet

snippet ele "EXPECT_LE" b
EXPECT_LE($1, $2);
endsnippet

snippet eth "EXPECT_THROW" b
EXPECT_THROW($1, $2);
endsnippet
