priority -50

snippet def "#define ..."
#ifndef ${1}
#define ${1} ${2}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet Inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet Main "main() (main)"
int main() {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop" b
for (${1:int }${2:i} = ${3:0}; $2 < ${4:count}; $2++)
	${VISUAL}${0}
endsnippet

snippet forr "reverse for"
for (${1:int }${2:upper} = ${3:0}; $2 >= ${4:lower}; $2++) {
	${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
typedef enum {
	$1
} $0;
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1:/* condition */}) {
	${VISUAL}${2}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${2}
} while(${1:/* condition */});${0}
endsnippet

snippet fpf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2}
} else {
	${3}
}${0}
endsnippet

snippet sw "switch"
switch (${1}) {
${VISUAL}${0}
}
endsnippet

snippet ca "case"
case ${1:/* condition */}:
	${VISUAL}${2}
	break;${0}
endsnippet

snippet de "default"
default:
	${VISUAL}${2}
	break;${0}
endsnippet

snippet fn "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${4}
}${0}
endsnippet

snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet
