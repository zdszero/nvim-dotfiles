priority -50

##########################
#    MARCO  DEFINATIONS  #
##########################

snippet def "#define ..."
#define $0
endsnippet

snippet ndef "define guard"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif"
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet once "header include guard"
#ifndef $1
#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

snippet nocxx  "disable c++ name mangling"
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
endsnippet

snippet td "typedef" b
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet tds "typedef structure" b
/*! \struct $2
 *  \brief ${5:Brief struct description}
 *
 *  ${6:Detailed description}
 */
typedef struct ${2:_$1 }{
	m_${3:Data} /*!< ${4:Description} */
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet

snippet tde "typedef enumeatte" b
/*! \enum $2
 *
 *  ${4:Detailed description}
 */
typedef enum {
	${1:Data} /*!< ${3:Description} */
} ${2:foo};
endsnippet

snippet enum "enumerate" b
/*! \enum $1
 *
 *  ${2:Detailed description}
 */
enum ${1:name} { ${0} };
endsnippet

########################
#       STRUCTURES     #
########################

snippet Inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet Main "main() (main)"
int main() {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet st "struct" b
struct ${1:/* name */} {
	${2}
};${0}
endsnippet

snippet enum "Enumeration"
typedef enum {
	$1
} $0;
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${4}
}${0}
endsnippet

######################
#     STATEMENTS     #
######################

snippet for "for loop" b
for (${1:int }${2:i} = ${3:0}; $2 < ${4:count}; $2++) {
	${VISUAL}${0}
}
endsnippet

snippet forr "reverse for"
for (${1:int }${2:upper} = ${3:0}; $2 >= ${4:lower}; $2++) {
	${VISUAL}${0}
}
endsnippet

snippet wh "while loop"
while (${1:/* condition */}) {
	${VISUAL}${2}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${2}
} while(${1:/* condition */});${0}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2}
} else {
	${3}
}${0}
endsnippet

snippet sw "switch"
switch (${1}) {
${VISUAL}${0}
}
endsnippet

snippet ca "case"
case ${1:/* condition */}:
	${VISUAL}${2}
	break;${0}
endsnippet

snippet de "default"
default:
	${VISUAL}${2}
	break;${0}
endsnippet


######################
#       HEADER       #
######################

snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

snippet dfun "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet

#############################
#     SOME CODING TEMPLATE  #
#############################

snippet pr "printf" b
printf("${1:%s}", ${0});
endsnippet

snippet fpr "fprintf" b
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

snippet getopt "getopt template" b
int choice;
while (1)
{
	static struct option long_options[] =
	{
		/* Use flags like so:
		{"verbose",	no_argument,	&verbose_flag, 'V'}*/
		/* Argument styles: no_argument, required_argument, optional_argument */
		{"version", no_argument,	0,	'v'},
		{"help",	no_argument,	0,	'h'},
		${1}
		{0,0,0,0}
	};

	int option_index = 0;

	/* Argument parameters:
		no_argument: " "
		required_argument: ":"
		optional_argument: "::" */

	choice = getopt_long( argc, argv, "vh",
				long_options, &option_index);

	if (choice == -1)
		break;

	switch( choice )
	{
		case 'v':
			${2}
			break;

		case 'h':
			${3}
			break;

		case '?':
			/* getopt_long will have already printed an error */
			break;

		default:
			/* Not sure how to get here... */
			return EXIT_FAILURE;
	}
}

/* Deal with non-option arguments here */
if ( optind < argc )
{
	while ( optind < argc )
	{
		${0}
	}
}
endsnippet

snippet nonblock "nonblocking file descriptor" b
flags =  fcntl(fd, F_GETFL);
flags |= O_NONBLOCK;
fcntl(fd, F_SETFL, flags);
endsnippet

snippet block "blocking file descriptor" b
flags = fcntl(fd, F_GETFL)
flags &= ~O_NONBLOCK;
fcntl(fd, F_SETFL, flags);
endsnippet
