snippet Inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifn "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet assert "define assert"
#if DEBUG
	#define ASSERT(condition, errMsg) \
		if (!(condition)) {\
			fprintf(stderr, "ASSERT failed! %s:%d In function %s(): %s\n", \
			Â¦  __FILE__, __LINE__, __func__, errMsg); \
			abort();\
		}\
#else
	#define ASSERT(condition, errMsg) ((void)0)
#endif
endsnippet
# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
