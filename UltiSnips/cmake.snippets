snippet template "cmake template"
cmake_minimum_required(VERSION 3.8)

# project
# subdirectory
# package
# targets
endsnippet

snippet standard_cxx "cxx standard" b
# C++ standard can be overridden when this is used as a sub-project.
if(NOT CMAKE_CXX_STANDARD)
	# This project requires C++11.
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)
endif(NOT CMAKE_CXX_STANDARD)
endsnippet

snippet standard_c "c standard" b
# C standard can be overridden when this is used as a sub-project.
if(NOT CMAKE_C_STANDARD)
	# This project can use C11, but will gracefully decay down to C89.
	set(CMAKE_C_STANDARD 11)
	set(CMAKE_C_STANDARD_REQUIRED OFF)
	set(CMAKE_C_EXTENSIONS OFF)
endif(NOT CMAKE_C_STANDARD)
endsnippet

snippet project "Project" b
project(
	${1:ProjectName}
	VERSION `!v strftime("%H-%M")`
	DESCRIPTION "$2"
	LANGUAGES C CXX
)
endsnippet

snippet find_program "find program and handling" b
find_program(${1:VAR_NAME} ${2:program_name})
if ("$\{$1\}" STREQUAL "$1-NOTFOUND")
	message(WARNING "CMake couldn't find $2")
else()
	message(STATUS "CMake found $2 at ${CLANG_FORMAT_BIN}")
endif()
endsnippet

snippet find_package "find package and handling" b
find_package(${1:PACKAGE_NAME})
if($1_Found)
	$0
else()
	message(WARNING "CMake couldn't find $1")
endif()
endsnippet

snippet build_type "build type: Debug or Release" b
if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -Wno-unused-variable")
else( CMAKE_BUILD_TYPE STREQUAL "Release" )
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -fopenmp")
endif( CMAKE_BUILD_TYPE STREQUAL "Debug" )
endsnippet

snippet flag_compile "Set Compile Flags" b
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wextra -Werror -march=native")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-attributes") #TODO: remove
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls")
endsnippet

snippet flag_link "Set Linker Flags" b
set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -fPIC")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fPIC")
set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -fPIC")
set(GCC_COVERAGE_LINK_FLAGS    "-fPIC")
endsnippet

snippet flag_message "Message Flags" b
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
endsnippet
